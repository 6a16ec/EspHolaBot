from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ParseMode, ContentTypes
from aiogram.utils.markdown import bold, code, italic, text

from config import TOKEN
import keyboard
import func



bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(lambda message: not func.chat_id_found(message.chat.id), commands=['start'])
async def welcome_message(message: types.Message):
    func.chat_id_add(message.chat.id)
    func.column_add(message.chat.id, "state", 1234)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —à–∫–æ–ª–µ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ESP.HOLA –í–º–µ—Å—Ç–µ –º—ã –¥–æ–±–µ—Ä–µ–º—Å—è –¥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º (—É—Ä–æ–≤–Ω—è –°2), –º–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–Ω–∏—Ç—å –≤—Å—è–∫–æ–µ –≤–∞–∂–Ω–æ–µ, —Ç–≤–æ—è ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è, –ø–æ–∫–∞–∂—É –¥–æ—Ä–æ–≥—É –∫ –Ω–∞–º –≤ —à–∫–æ–ª—É, –ø—Ä–µ–¥—É–ø—Ä–µ–∂—É –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–ø–æ–º–Ω—é –ø—Ä–æ –¥–æ–º–∞—à–∫—É, –∏ –≤–æ–æ–±—â–µ —è –∫–ª–∞—Å—Å–Ω—ã–π üëåüèª\n–•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ Esp.Hola? üòä", reply = False, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard.inline("–ö–æ–Ω–µ—á–Ω–æ!", "#setstate@1235"))


# @dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1234, commands=['start'])
# async def full_name_request(message: types.Message):
#     full_name = func.check_full_name(message.chat.first_name + " " + message.chat.last_name) if "last_name" in message.chat else None
#     if full_name:
#         first_name, last_name = full_name
#         await message.reply('–í—ã *%s %s*?\n–ï—Å–ª–∏ –∏–º—è-—Ñ–∞–º–∏–ª–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ò–º—è –§–∞–º–∏–ª–∏—è*.\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n' % (first_name, last_name), reply = False, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard.inline("–î–∞–ª–µ–µ", "#setstate@1235"))
#     else:
#         await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ò–º—è –§–∞–º–∏–ª–∏—è*.\n', reply = False, parse_mode=ParseMode.MARKDOWN)
#
# @dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1235, commands=['start'])
# async def phone_number_again(message: types.Message):
#     await message.reply("–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"*–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º*\".", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.phone_number("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì≤"), reply = False)
#
# @dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1236, commands=['start'])
# async def welcome_again(message: types.Message):
#     await message.reply("–†–∞–¥ —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å, %s!\n–ü–µ—Ä–µ–¥ –í–∞–º–∏ *—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –Ω–∞ –¥–æ–º*." % (func.column_take(message.chat.id, "first_name")), reply = False, parse_mode=ParseMode.MARKDOWN)
#
# # @dp.message_handler(commands=['help'])
# # async def process_help_command(message: types.Message):
# #     await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")
#
@dp.message_handler(commands=['delete'])
async def process_help_command(message: types.Message):
    func.chat_id_del(message.chat.id)
    await message.reply("–î–∞–Ω–Ω—ã–µ –æ –í–∞—Å —É–¥–∞–ª–µ–Ω—ã!")

@dp.message_handler(content_types=ContentTypes.CONTACT)
async def get_contact(message: types.Message):
    if func.column_take(message.chat.id, "state") == 1236:
        func.column_add(message.chat.id, "phone", message.contact["phone_number"])
        await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!", reply_markup = keyboard.remove())
        await take_level(message)


async def take_level(message: types.Message):
    func.column_add(message.chat.id, "state", 1237)
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–∏–º (–Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º):\n\
\n\
*–ê1*\n\
\"–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ\". –ë—É–¥—É —É—á–∏—Ç—å—Å—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!\n\
\n\
*–ê1.2*\n\
\"–í–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç—å\". –£–∂–µ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –µ–¥–µ, –º—É–∑—ã–∫–µ –∏ –∫–∏–Ω–æ, –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ –∏ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º.\n\
\n\
*–ê2.1*\n\
\"–ü—Ä–∏–≤—ã–∫–∞–Ω–∏–µ\". –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∂–∏–∑–Ω—å –±–µ–∑ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ. –ë–µ–∑ —Ç—Ä—É–¥–∞ –ø–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç—ã (–∏–Ω–æ–≥–¥–∞ —Å –ø–æ–º–æ—â—å—é Esp.Hola), –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã, –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä S –≤ ZARA –∏–ª–∏ –ø–æ—Ä—É–≥–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ—Ç–µ–ª—è.\n\
\n\
*–ê2.2*\n\
\"–°—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\". –ß—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –ø–æ—Ä–∞ –±—Ä–∞—Ç—å –±–∏–ª–µ—Ç—ã –≤ –ò—Å–ø–∞–Ω–∏—é. –ò –±–µ—Ä—É, –∞–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–∏–Ω–∏–º–∞—è—Å—å –∑–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π. –í–º–µ—Å—Ç–µ –º—ã –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å–ø–∞–Ω—Ü–∞–º –æ –Ω–∞—à–µ–º –ø—Ä–æ—à–ª–æ–º –∏ –±—É–¥—É—â–µ–º - ¬°sin problemas!\n\
\n\
*B1.1*\n\
\"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\". –•–æ—Ç–µ–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –ê2.2, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n\
–ü—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–∞—É—á–∏–º—Å—è –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–∏, —Å–ø–æ—Ä–∏—Ç—å –∏ –¥–∞–∂–µ, hostia, —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º! –•–æ—Ç—è –≤—ã —ç—Ç–æ —É–∂–µ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —É–º–µ–µ—Ç–µ...\n\
\n\
*B1.2*\n\
\"–ü—Ä–∏–Ω—è—Ç–∏–µ\". –£–∂–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å. –ö–æ–≥–¥–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —Ç–µ–∫—Å—Ç—ã –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –∏ –≤—Å–µ —ç—Ç–æ –ø–æ–Ω–∏–º–∞–µ—à—å —É–∂–µ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è ‚Äî —ç—Ç–æ –±–µ—Å—Ü–µ–Ω–Ω–æ! –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –ª—é–±–∏–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–µ–±–∞—Ç—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –º–æ–≥ –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —Ç–æ–º—É –∏–ª–∏ –∏–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É. –î–æ–±–∞–≤–∏–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—É–±—Ö—É–Ω—Ç–∏–≤–æ!\n\
\n\
*B2.1*\n\
\"–õ—é–±–æ–≤—å\". –£–∂–µ –Ω–∞ 90% –∏—Å–ø–∞–Ω–µ—Ü –∏–ª–∏ –∏—Å–ø–∞–Ω–∫–∞.\n\
–°–ª–æ–≤–æ \"—Å—É–±—Ö—É–Ω—Ç–∏–≤–æ\" –≤—ã —Å–ª—ã—à–∏—Ç–µ —á–∞—â–µ, —á–µ–º —Å–≤–æ–µ –∏–º—è. –ú—ã –Ω–∞—É—á–∏–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–∏—Å—å–º–∞, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é, –≤–µ–¥—å –≤—ã —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–µ–∑–¥ –≤ –ò—Å–ø–∞–Ω–∏—é, –Ω–µ —Ç–∞–∫ –ª–∏?\n\
\n\
*B2.2*\n\
\"–û–±–æ–∂–∞–Ω–∏–µ\". –í–∞—à –∏—Å–ø–∞–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–µ–Ω, —á—Ç–æ –≤–∞–º —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞–±–æ—Ç—É –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞–¥—Ä–∏–¥–∞ –Ω–∞ –ì—Ä–∞–Ω –í–∏–∞. –í—ã —Å–ª—É—à–∞–µ—Ç–µ —Ä–∞–¥–∏–æ Cadena 100 –≤ –∏—Å–ø–∞–Ω—Å–∫–æ–º —Ç–∞–∫—Å–∏ –∏ –≤–º–µ—Å—Ç–µ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º —Ä—É–≥–∞–µ—Ç–µ –∏—Å–ø–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ—Å–æ–±–µ–Ω–Ω–æ, –†–∞—Ö–æ—è.\
*C*\n\
\"100% –∏—Å–ø–∞–Ω–µ—Ü\".\n\
–ù–∞—à–∞ —à–∫–æ–ª–∞ - –≤–∞—à –≤—Ç–æ—Ä–æ–π –¥–æ–º. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—à –∏—Å–ø–∞–Ω—Å–∫–∏–π –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∞—à—É —Ä–µ—á—å –º–Ω–æ–≥–æ –Ω–æ–≤–æ–π, –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–ª–∏—á–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Ç–æ–Ω–∫–æ—Å—Ç—è—Ö –∏ –≤–∞–∂–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –Ω—é–∞–Ω—Å–∞—Ö. –í –ò—Å–ø–∞–Ω–∏–∏ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–≥–∞–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã - –Ω–µ –º–µ—Å—Ç–Ω—ã–π."
    kb = keyboard.inline([["A1.1", "A1.2", "A2.1", "A2.2"], ["B1.1", "B1.2", "B2.1", "B2.2"], ["C"]], [["#setlevel@A1.1", "#setlevel@A1.2", "#setlevel@A2.1", "#setlevel@A2.2"], ["#setlevel@B1.1", "#setlevel@B1.2", "#setlevel@B2.1", "#setlevel@B2.2"], ["#setlevel@C"]])
    await message.reply(text, parse_mode=ParseMode.MARKDOWN, reply_markup = kb, reply = False)



@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1235)
async def text_message1(message: types.Message):
    full_name = func.check_full_name(message.text)
    if full_name:
        first_name, last_name = full_name
        func.column_add(message.chat.id, "first_name", first_name)
        func.column_add(message.chat.id, "last_name", last_name)
        await take_phone(message)
    else:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1240)
async def question_to_db(message: types.Message):
    func.column_add(message.chat.id, "question", message.text[:64])
    await bot.send_message(message.chat.id, "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!)")

@dp.message_handler()
async def text_message(message: types.Message):
    # await bot.send_message(message.chat.id, message.text, reply_markup=keyboard.reply([["üìÑ –ú–µ–Ω—é", "üç± –ö–æ—Ä–∑–∏–Ω–∞"], ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí¨ –ü–æ–º–æ—â—å"]] ))
    await bot.send_message(message.chat.id, message.text)


@dp.callback_query_handler(lambda callback_query: "#setstate@1236" in callback_query.data)
async def take_phone_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1235:
        full_name = func.check_full_name(message.chat.first_name + " " + message.chat.last_name)
        first_name, last_name = full_name
        func.column_add(message.chat.id, "first_name", first_name)
        func.column_add(message.chat.id, "last_name", last_name)
        await take_phone(message)

@dp.callback_query_handler(lambda callback_query: "#setstate@1241" in callback_query.data)
async def reg_well_done(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1240:
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ üôåüèª\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Esp.Hola! üíõ", parse_mode=ParseMode.MARKDOWN, reply = False)


async def take_phone(message: types.Message):
    func.column_add(message.chat.id, "state", 1236)
    await message.reply("–ï—â–µ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –≤ —à–∫–æ–ª—É, –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π üëåüèª\n–ù–∞–∂–º–∏ \"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º\" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.phone_number("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì≤"), reply = False)

async def days_choose(message: types.Message):
    func.column_add(message.chat.id, "state", 1238)
    await message.reply("–ö–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.inline([["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—Ä–µ–¥–∞"],["–í—Ç–æ—Ä–Ω–∏–∫-–ß–µ—Ç–≤–µ—Ä–≥"]], [["#setdays@–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—Ä–µ–¥–∞"],["#setdays@–í—Ç–æ—Ä–Ω–∏–∫-–ß–µ—Ç–≤–µ—Ä–≥"]]), reply = False)

async def time_choose(message: types.Message):
    func.column_add(message.chat.id, "state", 1239)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –≤—ã–±–æ—Ä *{days}*\n–ê –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å?".format(days = func.column_take(message.chat.id, "days")), parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.inline([["8:00", "10:00", "12:00"], ["14:00", "15:00", "16:00"], ["18:00", "19:00", "20:00"], ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏"]], [["#settime@8:00", "#settime@10:00", "#settime@12:00"], ["#settime@14:00", "#settime@15:00", "#settime@16:00"], ["#settime@18:00", "#settime@19:00", "#settime@20:00"], ["#dayschoose"]]), reply = False)

async def questions_step(message: types.Message):
    func.column_add(message.chat.id, "state", 1240)
    await message.reply("–û—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –∏—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"‚úÖ –ì–æ—Ç–æ–≤–æ!\" –Ω–∏–∂–µ", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.inline("‚úÖ –ì–æ—Ç–æ–≤–æ!", "#setstate@1241"), reply = False)


@dp.callback_query_handler(lambda callback_query: "#setstate@1235" in callback_query.data)
async def of_course_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    func.column_add(message.chat.id, "state", 1235)
    full_name = func.check_full_name(message.chat.first_name + " " + message.chat.last_name) if "last_name" in message.chat else None
    if full_name:
        first_name, last_name = full_name
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–¢—ã *{first_name}* *{last_name}*?\n–ï—Å–ª–∏ –∏–º—è-—Ñ–∞–º–∏–ª–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ*!\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ \"–î–∞–ª—å—à–µ\" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.".format(first_name = first_name, last_name = last_name), parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard.inline("–î–∞–ª—å—à–µ ‚û°Ô∏è", "#setstate@1236"))
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ò–º—è –§–∞–º–∏–ª–∏—è*.\n', reply = False, parse_mode=ParseMode.MARKDOWN)



@dp.callback_query_handler(lambda callback_query: "#setdays" in callback_query.data)
async def setdays_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1238:
        days = callback.data.replace("#setdays@", "")
        func.column_add(message.chat.id, "days", days)
        await time_choose(message)

@dp.callback_query_handler(lambda callback_query: "#dayschoose" in callback_query.data)
async def days_choose_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1239:
        await days_choose(message)

@dp.callback_query_handler(lambda callback_query: "#setlevel" in callback_query.data)
async def setlevel_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1237:
        level = callback.data.replace("#setlevel@", "")
        func.column_add(message.chat.id, "level", level)
        await days_choose(message)

@dp.callback_query_handler(lambda callback_query: "#settime" in callback_query.data)
async def settime_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    if func.column_take(message.chat.id, "state") == 1239:
        time = callback.data.replace("#settime@", "")
        func.column_add(message.chat.id, "time", time)
        await questions_step(message)

@dp.callback_query_handler()
async def any_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    await bot.send_message(message.chat.id, "callback: " + callback.data)

if __name__ == '__main__':
    executor.start_polling(dp)
